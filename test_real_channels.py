#!/usr/bin/env python3
"""
–¢–µ—Å—Ç —Ä–µ–∞–ª—å–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤ Telegram
"""
import asyncio
import os
from telethon import TelegramClient
from telethon.sessions import StringSession
from dotenv import load_dotenv

load_dotenv()

async def test_real_channels():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ –∫–∞–Ω–∞–ª—ã"""
    
    # –ü–æ–ª—É—á–∞–µ–º credentials
    api_id = os.getenv("TELEGRAM_API_ID")
    api_hash = os.getenv("TELEGRAM_API_HASH")
    session_string = os.getenv("TELEGRAM_SESSION")
    
    if not all([api_id, api_hash, session_string]):
        print("‚ùå Missing Telegram credentials")
        return
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç
    client = TelegramClient(
        StringSession(session_string),
        int(api_id),
        api_hash
    )
    
    try:
        await client.start()
        print("‚úÖ Connected to Telegram")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ –∫–∞–Ω–∞–ª—ã
        test_channels = [
            "rogov24",
            "burimovasasha", 
            "zarina_brand",
            "goldapple_ru",
            "glamguruu",
            "casacozy",
            "homiesapiens"
        ]
        
        working_channels = []
        broken_channels = []
        
        for channel in test_channels:
            try:
                entity = await client.get_entity(channel)
                print(f"‚úÖ {channel}: {entity.title} (ID: {entity.id}, Subscribers: {getattr(entity, 'participants_count', 'N/A')})")
                working_channels.append(channel)
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –ø–æ—Å—Ç—ã —Å —Ñ–æ—Ç–æ
                photo_count = 0
                async for message in client.iter_messages(entity, limit=10):
                    if message.photo:
                        photo_count += 1
                        if photo_count >= 3:  # –î–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–ª—è —Ç–µ—Å—Ç–∞
                            break
                
                print(f"   üì∏ Found {photo_count} posts with photos")
                
            except Exception as e:
                print(f"‚ùå {channel}: {e}")
                broken_channels.append(channel)
        
        print(f"\nüìä SUMMARY:")
        print(f"‚úÖ Working channels: {len(working_channels)}")
        print(f"‚ùå Broken channels: {len(broken_channels)}")
        
        if working_channels:
            print(f"\n‚úÖ WORKING CHANNELS:")
            for ch in working_channels:
                print(f"  - {ch}")
        
        if broken_channels:
            print(f"\n‚ùå BROKEN CHANNELS:")
            for ch in broken_channels:
                print(f"  - {ch}")
                
    except Exception as e:
        print(f"‚ùå Error: {e}")
    finally:
        await client.disconnect()

if __name__ == "__main__":
    asyncio.run(test_real_channels())
